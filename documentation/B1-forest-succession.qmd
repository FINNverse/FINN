# Simulating patterns of forest succesion {#sec-simulating}

Here the FINN model is illustrated by simulating forest succession for different numbers of species and under different.

We first generate a time series of two environments.

## One species

Here we set up the model with only one species

```{r, fig.height= 20, fig.width=10}
library(FINN)
library(data.table)
library(ggplot2)
FINN:::.onLoad()
FINN = FINN:::pkg.env$FINN
torch = FINN:::pkg.env$torch
as_ten = function(x, dtype=torch$float32) {torch$tensor(x, dtype=dtype)}
to_r = function(x) FINN:::force_r(x$cpu()$data$numpy())


timesteps = 50
Nsites = 5
# env = matrix(runif(Nsites*1,-2,2), Nsites, 1)
env = matrix(round(seq(-2,2,length.out = Nsites),2), Nsites, 1)
env = cbind(1, env)
env_a = abind::abind(lapply(1:timesteps, function(i) env), along = 0)
dim(env_a)
env_a = aperm(env_a, perm = c(2, 1, 3))
dim(env_a)


model= FINN$FINN(sp = 1L, env = 2L,
                 parGlobal = 0.5,
                 parGrowth = matrix(c(0.1, 1), 1, 2),
                 parMort = matrix(c(0.2, 3), 1, 2),
                 parReg = 0.1,
                 parGrowthEnv = list(matrix(c(0,0), 1, 2)),
                 parMortEnv = list(matrix(c(-100,-100), 1, 2)),
                 parRegEnv = list(matrix(c(0.1, 0.0), 1, 2))
)

pred = model$predict(env = as_ten(env_a), response = "BA*T", patches = 1L)
preds = lapply(reticulate::py_to_r(pred), function(d) FINN:::force_r(d$cpu()$data$numpy()))

# Generate the indices for each dimension
dim_indices <- expand.grid(site = 1:dim(preds[[1]])[1],
                           timestep = 1:dim(preds[[1]])[2],
                           Species = 1:dim(preds[[1]])[3])

# Convert the 3D array to a vector and combine with indices
# long_data <- cbind(dim_indices, trees = as.vector(pred[[1]]))
# long_data$ba <- cbind(dim_indices, ba = as.vector(pred[[2]]))$ba

long_data <- cbind(dim_indices, ba = as.vector(preds[[1]]))
for(i in 2:6){
  col_name = c("ba","nTree","AL", "g", "m", "r")[i]
  long_data[[col_name]] <- cbind(dim_indices, as.vector(preds[[i]]))[,4]
}
long_data[["env1"]] <- cbind(dim_indices, as.vector(env_a[,,1]))[,4]
long_data[["env2"]] <- cbind(dim_indices, as.vector(env_a[,,2]))[,4]

long_data = data.table(long_data)
pdat = long_data[,.(
  trees = (mean(nTree)),
  ba = (mean(ba)),
  AL = (mean(AL)),
  g = (mean(g)),
  m = (mean(m)),
  r = (mean(r))
), by = .(site,timestep,Species,env1,env2)]
p1 <- ggplot(pdat, aes(x = timestep, y = trees, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
p2 <- ggplot(pdat, aes(x = timestep, y = ba, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
p3 <- ggplot(pdat, aes(x = timestep, y = AL, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
p4 <- ggplot(pdat, aes(x = timestep, y = g, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
p5 <- ggplot(pdat, aes(x = timestep, y = m, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
p6 <- ggplot(pdat, aes(x = timestep, y = r, color = factor(Species)))+
  geom_line()+
  facet_wrap(~env2, ncol = Nsites)+
  coord_cartesian()
ggpubr::ggarrange(plotlist = list(p1,p2,p3,p4,p5,p6),ncol = 1, common.legend = T)





```

##Two species

## Multiple species
