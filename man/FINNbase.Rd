% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FINNbase.R
\name{FINNbase}
\alias{FINNbase}
\title{FINNbase class}
\description{
The \code{FINNbase} class provides core functionalities for building and managing neural networks within the FINN model framework. This class includes methods for constructing neural networks, generating random numbers, and managing model parameters.
}
\examples{

## ------------------------------------------------
## Method `FINNbase$build_NN`
## ------------------------------------------------

build_NN(input_shape = 2, output_shape = 3, hidden = c(1, 3, 2), bias = TRUE, activation = "relu", dropout = 1, last_activation = "sigmoid")
Generate random numbers from a uniform distribution

This function generates random numbers from a uniform distribution with specified low and high values and size similar to `np.random.uniform` in Python.


## ------------------------------------------------
## Method `FINNbase$np_runif`
## ------------------------------------------------

np_runif(0, 1, c(2, 3))
Set weights for the Growth Environment Neural Network

This function assigns the specified weights to the growth environment neural network.

}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FINNbase-build_NN}{\code{FINNbase$build_NN()}}
\item \href{#method-FINNbase-np_runif}{\code{FINNbase$np_runif()}}
\item \href{#method-FINNbase-set_weights_nnGrowthEnv}{\code{FINNbase$set_weights_nnGrowthEnv()}}
\item \href{#method-FINNbase-set_weights_nnMortEnv}{\code{FINNbase$set_weights_nnMortEnv()}}
\item \href{#method-FINNbase-set_weights_nnRegEnv}{\code{FINNbase$set_weights_nnRegEnv()}}
\item \href{#method-FINNbase-set_weights}{\code{FINNbase$set_weights()}}
\item \href{#method-FINNbase-parameter_to_r}{\code{FINNbase$parameter_to_r()}}
\item \href{#method-FINNbase-check}{\code{FINNbase$check()}}
\item \href{#method-FINNbase-update_parameters}{\code{FINNbase$update_parameters()}}
\item \href{#method-FINNbase-setPars}{\code{FINNbase$setPars()}}
\item \href{#method-FINNbase-getPars}{\code{FINNbase$getPars()}}
\item \href{#method-FINNbase-clone}{\code{FINNbase$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-build_NN"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-build_NN}{}}}
\subsection{Method \code{build_NN()}}{
Build a neural network

This function builds a neural network with specified input shape, output shape, hidden layers, bias, activation functions, dropout rate, and last activation function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$build_NN(
  self,
  input_shape,
  output_shape,
  hidden,
  bias,
  activation,
  dropout,
  last_activation = "sigmoid"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_shape}}{integer. Number of predictors.}

\item{\code{output_shape}}{integer. Number of species.}

\item{\code{hidden}}{vector. List of hidden layers.}

\item{\code{bias}}{vector. Boolean values indicating whether to use bias in hidden layers.}

\item{\code{activation}}{vector. List of activation functions.}

\item{\code{dropout}}{float. Dropout rate.}

\item{\code{last_activation}}{character. Last activation function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
torch.nn.modules.container.Sequential. Sequential neural network object.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{build_NN(input_shape = 2, output_shape = 3, hidden = c(1, 3, 2), bias = TRUE, activation = "relu", dropout = 1, last_activation = "sigmoid")
Generate random numbers from a uniform distribution

This function generates random numbers from a uniform distribution with specified low and high values and size similar to `np.random.uniform` in Python.

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-np_runif"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-np_runif}{}}}
\subsection{Method \code{np_runif()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$np_runif(low, high, size)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{low}}{numeric. Lower bound of the uniform distribution.}

\item{\code{high}}{numeric. Upper bound of the uniform distribution.}

\item{\code{size}}{numeric. Size of the output array.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
array. A numeric array of random numbers.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{np_runif(0, 1, c(2, 3))
Set weights for the Growth Environment Neural Network

This function assigns the specified weights to the growth environment neural network.

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-set_weights_nnGrowthEnv"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-set_weights_nnGrowthEnv}{}}}
\subsection{Method \code{set_weights_nnGrowthEnv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$set_weights_nnGrowthEnv(weights)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{weights}}{list. A list of weight tensors to be set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. The weights are set in the neural network.
Set weights for the Mortality Environment Neural Network

This function assigns the specified weights to the mortality environment neural network.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-set_weights_nnMortEnv"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-set_weights_nnMortEnv}{}}}
\subsection{Method \code{set_weights_nnMortEnv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$set_weights_nnMortEnv(weights)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{weights}}{list. A list of weight tensors to be set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. The weights are set in the neural network.
Set weights for the Regeneration Environment Neural Network

This function assigns the specified weights to the regeneration environment neural network.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-set_weights_nnRegEnv"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-set_weights_nnRegEnv}{}}}
\subsection{Method \code{set_weights_nnRegEnv()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$set_weights_nnRegEnv(weights)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{weights}}{list. A list of weight tensors to be set.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None. The weights are set in the neural network.
Set weights for a specified Neural Network

This function assigns the specified weights to a given neural network model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-set_weights"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-set_weights}{}}}
\subsection{Method \code{set_weights()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$set_weights(weights, NN)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{weights}}{list. A list of weight tensors to be set.}

\item{\code{NN}}{torch.nn.modules.container.Sequential. The neural network model to set weights for.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
torch.nn.modules.container.Sequential. The neural network with updated weights.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-parameter_to_r"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-parameter_to_r}{}}}
\subsection{Method \code{parameter_to_r()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$parameter_to_r()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-check"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-check}{}}}
\subsection{Method \code{check()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$check(device = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-update_parameters"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-update_parameters}{}}}
\subsection{Method \code{update_parameters()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$update_parameters()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-setPars"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-setPars}{}}}
\subsection{Method \code{setPars()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$setPars(inputPar, parRange)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-getPars"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-getPars}{}}}
\subsection{Method \code{getPars()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$getPars(internalPar, parRange)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FINNbase-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FINNbase-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FINNbase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
