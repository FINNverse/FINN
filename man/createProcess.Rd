% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FINNInterface.R
\name{createProcess}
\alias{createProcess}
\title{Create a Process Object}
\usage{
createProcess(
  formula = NULL,
  func,
  initSpecies = NULL,
  initEnv = NULL,
  hidden = NULL,
  optimizeSpecies = FALSE,
  optimizeEnv = TRUE,
  inputNN = NULL,
  outputNN = NULL,
  dispersion_parameter = NULL,
  sample_regeneration = TRUE,
  NN = NULL
)
}
\arguments{
\item{formula}{An optional formula specifying the structure of the model. Default is \code{NULL}, which results in the formula \code{~.} being used.}

\item{func}{A custom function to define the process. This is a required parameter.}

\item{initSpecies}{Initial species parameters for the process. Default is \code{NULL}.}

\item{initEnv}{Initial environmental parameters for the process. Default is \code{NULL}.}

\item{hidden}{A list specifying the hidden layers for neural network models. Default is an empty list.}

\item{inputNN}{input dimension for NN, default is inferred from the formula. See details}

\item{outputNN}{output dimension for NN, default is the number of species. See details}

\item{dispersion_parameter}{init dispersion parameter, if available (currently only supported for regeneration rate that is based on a negative binomial).}

\item{sample_regeneration}{sample regeneration rate or not. If not, loss will be calculated via mse.}

\item{NN}{pass custom NN to model}

\item{optimize}{Logical indicating whether the process function should be optimized. Default is \code{FALSE}.}
}
\value{
A list of class "process" containing the process definition and associated parameters.
}
\description{
This function creates a process object that is used to define a specific ecological process (e.g., growth, mortality, regeneration) within a forest simulation model. The process object can include custom functions, species parameters, environmental initialization, and hidden layers for neural networks.
}
\examples{
growth_process <- createProcess(formula = ~temperature + precipitation, func = growthFunction)

}
